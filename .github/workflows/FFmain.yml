name: FF Build SageAttention 2.2 (Windows • cu129 • Py3.13.7 • Torch 2.8 via Conda CUDA)

on:
  workflow_dispatch:
    inputs:
      sage_repo:
        description: "Upstream SageAttention repository"
        required: false
        default: "thu-ml/SageAttention"
      sage_ref:
        description: "Ref in upstream repo (branch/tag/sha). Use 'main' for 2.2 code."
        required: false
        default: "main"
      wheel_suffix:
        description: "Optional wheel filename suffix (e.g. +rev1)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  build-win:
    name: Build wheel (self-hosted Win11 • RTX 4090 • Py 3.13.7 • Torch 2.8.0+cu129)
    runs-on: [self-hosted, windows, win11, gpu, gpu-4090]
    timeout-minutes: 180

    env:
      PYTHON_VERSION: "3.13.7"
      TORCH_VERSION: "2.8.0"
      TORCH_CUDA_TAG: "cu129"
      TORCH_CUDA_ARCH_LIST: "8.9"
      FORCE_CUDA: "1"
      EXT_PARALLEL: "4"
      NVCC_APPEND_FLAGS: "--threads 8"
      MAX_JOBS: "8"
      CMAKE_GENERATOR: "Ninja"
      EXTRA_WHEEL_SUFFIX: ${{ github.event.inputs.wheel_suffix }}

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout SageAttention upstream
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.sage_repo }}
          ref: ${{ github.event.inputs.sage_ref }}
          path: SageAttention
          fetch-depth: 1

      - name: Show repository tree (debug)
        shell: pwsh
        run: |
          Write-Host "Repository root files:"
          Get-ChildItem -Force -Path . | Select-Object Name,Mode,Length
          if (Test-Path -Path SageAttention) {
            Write-Host "SageAttention directory files:"
            Get-ChildItem -Force -Path SageAttention | Select-Object Name,Mode,Length
          } else {
            Write-Host "SageAttention directory not present"
          }

      - name: Set up Miniconda (Py ${{ env.PYTHON_VERSION }})
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          activate-environment: buildenv
          python-version: ${{ env.PYTHON_VERSION }}
          channels: conda-forge,defaults
          miniforge-version: latest

      - name: Conda info / Python version
        shell: pwsh
        run: |
          conda info
          python --version

      - name: Check GPU and CUDA toolchain on runner
        shell: pwsh
        run: |
          Write-Host "Checking NVIDIA tools and drivers..."
          if (Get-Command nvidia-smi -ErrorAction SilentlyContinue) {
            Write-Host "nvidia-smi available:"
            nvidia-smi
          } else {
            Write-Host "nvidia-smi not found in PATH. Ensure NVIDIA drivers are installed on the runner."
          }
          if (Get-Command nvcc -ErrorAction SilentlyContinue) {
            Write-Host "nvcc found:"
            nvcc --version
            $nvccPresent = $true
          } else {
            Write-Host "nvcc not found. Will try to install cuda-toolkit via conda in the next step (if desired)."
            $nvccPresent = $false
          }
          # Expose detection result for next step
          if ($nvccPresent) { Write-Output "NVCC_PRESENT=1" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append } else { Write-Output "NVCC_PRESENT=0" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append }

      - name: Install CUDA toolkit 12.9 (conda) if nvcc missing
        shell: pwsh
        if: env.NVCC_PRESENT == '0'
        run: |
          Write-Host "nvcc not present; attempting to install cuda-toolkit=12.9 from nvidia channel via conda..."
          conda install -y -c nvidia cuda-toolkit=12.9
          if (Get-Command nvcc -ErrorAction SilentlyContinue) {
            Write-Host "nvcc installed successfully:"
            nvcc --version
          } else {
            Write-Host "WARNING: nvcc still not found after conda install. You may need to install CUDA toolkit or ensure CONDA_PREFIX\Library\bin is in PATH."
          }

      - name: Upgrade build tooling
        shell: pwsh
        run: |
          python -m pip install -U pip setuptools wheel ninja cmake packaging

      - name: Install PyTorch ${{ env.TORCH_VERSION }} + ${{ env.TORCH_CUDA_TAG }}
        shell: pwsh
        run: |
          Write-Host "Attempting to install torch ${env:TORCH_VERSION}+${env:TORCH_CUDA_TAG} from PyTorch index..."
          $pkg = "torch==${{ env.TORCH_VERSION }}+${{ env.TORCH_CUDA_TAG }}"
          try {
            python -m pip install --index-url https://download.pytorch.org/whl/${{ env.TORCH_CUDA_TAG }} $pkg -v
            Write-Host "pip exit code: $LASTEXITCODE"
          } catch {
            Write-Host "pip install raised an exception. This may mean the wheel is not published for Python ${env:PYTHON_VERSION} on Windows with ${env:TORCH_CUDA_TAG}."
          }
          Write-Host "Inspecting torch installation..."
          python -c "import sys, os; import importlib; spec = importlib.util.find_spec('torch'); installed = bool(spec); print('Python:', sys.version.split()[0]); print('torch installed:', installed); if installed: import torch; print('Torch:', getattr(torch,'__version__','?'), 'CUDA:', getattr(getattr(torch,'version',None),'cuda','unknown')); print('CUDA_HOME:', os.environ.get('CUDA_HOME') or os.environ.get('CUDA_PATH') or '')"

      - name: Export CUDA env (Windows)
        shell: pwsh
        run: |
          # Conda installs CUDA under CONDA_PREFIX; add to environment for builds
          $ENV:CUDA_HOME = "$ENV:CONDA_PREFIX"
          $ENV:CUDA_PATH = "$ENV:CONDA_PREFIX"
          $ENV:PATH = "$ENV:CONDA_PREFIX\Library\bin;$ENV:CONDA_PREFIX\bin;$ENV:PATH"
          Add-Content -Path $Env:GITHUB_ENV -Value "CUDA_HOME=$ENV:CUDA_HOME"
          Add-Content -Path $Env:GITHUB_ENV -Value "CUDA_PATH=$ENV:CUDA_PATH"
          Add-Content -Path $Env:GITHUB_ENV -Value "PATH=$ENV:PATH"
          Write-Host "Exported CUDA_HOME and CUDA_PATH and updated PATH."

      - name: Show toolchain versions
        shell: pwsh
        run: |
          python --version
          if (Get-Command nvcc -ErrorAction SilentlyContinue) { nvcc --version } else { Write-Host "nvcc: not found" }
          if (Get-Command nvidia-smi -ErrorAction SilentlyContinue) { nvidia-smi } else { Write-Host "nvidia-smi: not found" }
          if (Get-Command cl -ErrorAction SilentlyContinue) { cl | Select-Object -First 1 } else { Write-Host "cl (MSVC) not found; ensure Visual Studio + Desktop development workload is installed" }
          Write-Host "CUDA_HOME=$ENV:CUDA_HOME"
          Write-Host "CUDA_PATH=$ENV:CUDA_PATH"
          Write-Host "TORCH_CUDA_ARCH_LIST=$ENV:TORCH_CUDA_ARCH_LIST"

      - name: Build SageAttention wheel (cp313-win_amd64)
        shell: pwsh
        working-directory: SageAttention
        env:
          TORCH_CUDA_ARCH_LIST: ${{ env.TORCH_CUDA_ARCH_LIST }}
          FORCE_CUDA: ${{ env.FORCE_CUDA }}
          EXT_PARALLEL: ${{ env.EXT_PARALLEL }}
          NVCC_APPEND_FLAGS: ${{ env.NVCC_APPEND_FLAGS }}
          MAX_JOBS: ${{ env.MAX_JOBS }}
          CMAKE_GENERATOR: ${{ env.CMAKE_GENERATOR }}
        run: |
          Write-Host "Building wheel (setup.py bdist_wheel assumed). If project uses pyproject.toml, update this step."
          python setup.py bdist_wheel
          Write-Host "dist contents:"
          Get-ChildItem -Path dist | Select-Object Name,Length

      - name: Add wheel suffix (optional)
        if: ${{ env.EXTRA_WHEEL_SUFFIX != '' }}
        shell: pwsh
        working-directory: SageAttention/dist
        run: |
          $wheels = Get-ChildItem -Filter "*.whl" -File
          foreach ($w in $wheels) {
            $new = $w.Name -replace '\.whl$', '${{ env.EXTRA_WHEEL_SUFFIX }}.whl'
            Rename-Item -Path $w.FullName -NewName $new -Force
            Write-Host "Renamed: $($w.Name) -> $new"
          }

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: sageattention-2.2-cu129-win-py313-4090
          path: SageAttention/dist/*.whl
          if-no-files-found: error
